//go:build windows
// +build windows

/*
ID: e0114670-7598-4f1a-90ce-157ade6932b9
NAME: Potential Browser Exploit via Fake RPC Messages
CREATED: 2024-07-02
scenario: attempt to call memory manipulation APIs or load a library where call stack is pointing to the RPC function
NdrServerCall, this may indicate an attempt to exploit a vulnerability using fake RPC messages to bypass CFG mitigation.
A known example of vulnerability using this primitive is CVE-2021-26411.
*/
package main

import (
	"fmt"
	"os"
	"os/exec"
	"syscall"
	"unsafe"

	Endpoint "github.com/preludeorg/test/endpoint"
	"golang.org/x/sys/windows"
)

func main() {
	Endpoint.Say("[+] Starting Potential Browser Exploit via Fake RPC Messages VST")
	Endpoint.Start(test, cleanup)
}

func test() {
	browserProcesses := []string{"chrome.exe", "msedge.exe", "iexplore.exe", "brave.exe", "whale.exe", "browser.exe", "dragon.exe", "vivaldi.exe", "opera.exe", "seamonkey.exe", "safari.exe", "waterfox.exe"}
	for _, processName := range browserProcesses {
		cmd := exec.Command(processName)
		err := cmd.Start()
		if err != nil {
			Endpoint.Say(fmt.Sprintf("[-] Failed to start process %s: %s", processName, err))
			continue
		}
		defer cmd.Process.Kill()

		// memory manipulation with VirtualProtect + WriteProcessMemory
		procHandle, err := windows.OpenProcess(windows.PROCESS_ALL_ACCESS, false, uint32(cmd.Process.Pid))
		if err != nil {
			Endpoint.Say(fmt.Sprintf("[-] Failed to get process handle: %s", err))
			Endpoint.Stop(1) // ERROR
		}

		// allocate memory in target process
		addr, err := windows.VirtualAllocEx(procHandle, 0, 4096, windows.MEM_COMMIT|windows.MEM_RESERVE, windows.PAGE_READWRITE)
		if err != nil {
			Endpoint.Say(fmt.Sprintf("[-] Failed to allocate memory: %s", err))
			Endpoint.Stop(1) // ERROR
		}

		// write shellcode to allocated memory
		shellcode := []byte{0x90, 0x90, 0x90, 0x90} // NOP sled as a placeholder
		var written uint32
		err = windows.WriteProcessMemory(procHandle, addr, &shellcode[0], uint32(len(shellcode)), &written)
		if err != nil {
			Endpoint.Say(fmt.Sprintf("[-] Failed to write memory: %s", err))
			Endpoint.Stop(1) // ERROR
		}

		// change memory protection to EXECUTABLE
		oldProtect := windows.PAGE_READWRITE
		err = windows.VirtualProtectEx(procHandle, addr, 4096, windows.PAGE_EXECUTE_READ, &oldProtect)
		if err != nil {
			Endpoint.Say(fmt.Sprintf("[-] Failed to change memory protection: %s", err))
			Endpoint.Stop(1) // ERROR
		}

		// call NdrServerCall2
		// this component handles RPC requests + dispatches them to function pointers
		// has been exploited to bypass CFG
		// attacker replaced DOM vtable pointer with NdrServerCall2 -> bypassing CFG check
		_, err = syscall.GetProcAddress(windows.NewLazyDLL("rpcrt4.dll").Handle(), "NdrServerCall2")
		if err != nil {
			Endpoint.Say(fmt.Sprintf("[-] Failed to find NdrServerCall2: %s", err))
			Endpoint.Stop(1) // ERROR
		}
		Endpoint.Say("[+] Simulated RPC function call with memory manipulation")
	}
	Endpoint.Say("[+] Potential browser exploit via fake RPC messages executed successfully")
	Endpoint.Stop(101) // UNPROTECTED: Malicious behavior not blocked
}

func cleanup() {
	Endpoint.Say("[+] Cleanup completed successfully")
	Endpoint.Stop(100) // PROTECTED
}